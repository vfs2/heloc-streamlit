import streamlit as st
import joblib
import numpy as np

# Carrega o modelo
model = joblib.load("random_forest_model.pkl")

st.set_page_config(page_title="Previs√£o de Risco de Cr√©dito", layout="centered")
st.title("üîç Previs√£o de Risco de Cliente - HELOC")

st.markdown("Preencha os dados do cliente para prever se h√° **risco de inadimpl√™ncia**.")

# Entradas do usu√°rio
def user_input_features():
    ExternalRiskEstimate = st.slider("External Risk Estimate", 0, 100, 50)
    MSinceOldestTradeOpen = st.slider("Meses desde a conta mais antiga", 0, 400, 100)
    MSinceMostRecentTradeOpen = st.slider("Meses desde a conta mais recente", 0, 400, 30)
    AverageMInFile = st.slider("M√©dia de meses no arquivo", 0, 400, 150)
    NumSatisfactoryTrades = st.slider("N√∫mero de transa√ß√µes satisfat√≥rias", 0, 100, 20)
    NumTrades60Ever2DerogPubRec = st.slider("Transa√ß√µes com atraso 60+ dias", 0, 20, 0)
    NumTrades90Ever2DerogPubRec = st.slider("Transa√ß√µes com atraso 90+ dias", 0, 20, 0)
    PercentTradesNeverDelq = st.slider("Percentual de transa√ß√µes sem inadimpl√™ncia", 0, 100, 90)
    MSinceMostRecentDelq = st.slider("Meses desde √∫ltima inadimpl√™ncia", 0, 100, 12)
    MaxDelq2PublicRecLast12M = st.slider("M√°x. atraso em 12 meses", 0, 9, 1)
    MaxDelqEver = st.slider("M√°x. atraso j√° registrado", 0, 9, 2)
    NumTotalTrades = st.slider("N√∫mero total de transa√ß√µes", 0, 100, 30)
    NumTradesOpeninLast12M = st.slider("Transa√ß√µes abertas √∫ltimos 12 meses", 0, 20, 3)
    PercentInstallTrades = st.slider("Percentual de transa√ß√µes parceladas", 0, 100, 50)
    MSinceMostRecentInqexcl7days = st.slider("Meses desde √∫ltima consulta (exceto √∫ltimos 7 dias)", 0, 24, 4)
    NumInqLast6M = st.slider("Consultas nos √∫ltimos 6 meses", 0, 10, 1)
    NumInqLast6Mexcl7days = st.slider("Consultas 6 meses (exceto √∫ltimos 7 dias)", 0, 10, 1)
    NetFractionRevolvingBurden = st.slider("Carga l√≠quida de cr√©dito rotativo", 0, 200, 60)
    NetFractionInstallBurden = st.slider("Carga l√≠quida de cr√©dito parcelado", 0, 200, 40)
    NumRevolvingTradesWBalance = st.slider("Transa√ß√µes rotativas com saldo", 0, 20, 5)
    NumInstallTradesWBalance = st.slider("Transa√ß√µes parceladas com saldo", 0, 20, 4)
    NumBank2NatlTradesWHighUtilization = st.slider("Utiliza√ß√£o alta em contas banc√°rias", 0, 10, 1)
    PercentTradesWBalance = st.slider("Percentual de transa√ß√µes com saldo", 0, 100, 70)

    features = [
        ExternalRiskEstimate,
        MSinceOldestTradeOpen,
        MSinceMostRecentTradeOpen,
        AverageMInFile,
        NumSatisfactoryTrades,
        NumTrades60Ever2DerogPubRec,
        NumTrades90Ever2DerogPubRec,
        PercentTradesNeverDelq,
        MSinceMostRecentDelq,
        MaxDelq2PublicRecLast12M,
        MaxDelqEver,
        NumTotalTrades,
        NumTradesOpeninLast12M,
        PercentInstallTrades,
        MSinceMostRecentInqexcl7days,
        NumInqLast6M,
        NumInqLast6Mexcl7days,
        NetFractionRevolvingBurden,
        NetFractionInstallBurden,
        NumRevolvingTradesWBalance,
        NumInstallTradesWBalance,
        NumBank2NatlTradesWHighUtilization,
        PercentTradesWBalance
    ]
    return np.array(features).reshape(1, -1)

input_data = user_input_features()

# Bot√£o de previs√£o
if st.button("üîÆ Prever Risco"):
    prediction = model.predict(input_data)
    resultado = "‚ö†Ô∏è Cliente com **ALTO RISCO**" if prediction[0] == 1 else "‚úÖ Cliente com **BAIXO RISCO**"
    st.subheader("Resultado da Previs√£o:")
    st.markdown(f"### {resultado}")
